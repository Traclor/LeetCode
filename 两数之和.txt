给出两个?非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照?逆序?的方式存储的，并且它们的每个节点只能存储?一位?数字。


如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。


您可以假设除了数字 0 之外，这两个数都不会以 0?开头。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = l1;
        ListNode l1Pre = l1;
        if(l1 == null || l2 == null)
            return null;
        while(l1 != null && l2 != null){
            l1.val += l2.val;
            if(l1.val > 9){
                l1.val -= 10;
                if(l1.next == null){
                    ListNode temp = new ListNode(1);
                    l1.next = temp;
                }
                else
                    l1.next.val += 1;
            }
            l1Pre = l1;
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1 != null){
            if(l1.val > 9){
                l1.val -= 10;
                if(l1.next == null){
                    ListNode temp = new ListNode(1);
                    l1.next = temp;
                }
                 else
                    l1.next.val += 1;
            }
            l1 =l1.next;
        }
        if(l2 != null){
            l1Pre.next = l2;
        }
        return res;
    }
}

执行用时 :9 ms, 在所有 Java 提交中击败了81.78%的用户
内存消耗 :42 MB, 在所有 Java 提交中击败了93.09%的用户




附题解：
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}

作者：LeetCode
链接：https://leetcode-cn.com/problems/two-sum/solution/liang-shu-xiang-jia-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
