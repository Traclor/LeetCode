给定一个编码字符串 S。为了找出解码字符串并将其写入磁带，从编码字符串中每次读取一个字符，并采取以下步骤：

如果所读的字符是字母，则将该字母写在磁带上。
如果所读的字符是数字（例如 d），则整个当前磁带总共会被重复写?d-1 次。
现在，对于给定的编码字符串 S 和索引 K，查找并返回解码字符串中的第?K?个字母。

?

示例 1：

输入：S = "leet2code3", K = 10
输出："o"
解释：
解码后的字符串为 "leetleetcodeleetleetcodeleetleetcode"。
字符串中的第 10 个字母是 "o"。
示例 2：

输入：S = "ha22", K = 5
输出："h"
解释：
解码后的字符串为 "hahahaha"。第 5 个字母是 "h"。
示例 3：

输入：S = "a2345678999999999999999", K = 1
输出："a"
解释：
解码后的字符串为 "a" 重复 8301530446056247680 次。第 1 个字母是 "a"。
?

提示：

2 <= S.length <= 100
S?只包含小写字母与数字 2 到 9 。
S?以字母开头。
1 <= K <= 10^9
解码后的字符串保证少于?2^63?个字母。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/decoded-string-at-index
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public String decodeAtIndex(String S, int K) {
        String temp = "";
        String temp2 = "";
        String count = "";
        int cirCount = 1;
        int num = 0;
        for(int i=0; i<S.length();i++){
            if(!Character.isDigit(S.charAt(i))){
                temp+=S.charAt(i);
            }
            else{
                
                if(temp.length() >=K){
                    return String.valueOf(temp.charAt(K - 1) );
                }
                   
               
                     
                else{
                    count += S.charAt(i);
                    for(int j = i + 1; j<S.length();j++){
                        if(!Character.isDigit(S.charAt(j)))
                            break;
                         count += S.charAt(j);
                    }
                    
                    cirCount = temp.length();
                    for(;K > cirCount && num<count.length();num++ ){ 
                        cirCount *= (count.charAt(num) - 48);
                    }
                   
                    
                    if(cirCount < K){
                        temp2 = temp;
                        for(int k = 0; k < count.charAt(num - 1) - 48 - 1; k++ )
                            temp += temp2;
                        System.out.println("temp:"  + temp);
                    }
                    else{
                       
                        if(temp.length() == 1)
                            return temp;
                        if(K % temp.length() == 0)
                            return String.valueOf(temp.charAt(temp.length() -1));
                        return String.valueOf(temp.charAt(K % temp.length() - 1));
                    }
                }
            }
        }
        return String.valueOf(temp.charAt(K - 1));
    }
}


我并未做出来，主要思路是，根据展开式得到index，但是我溢出了。思路有问题


正确思路：

每次读取一个字符
读取字符为字母，记录该字母
读取为数字d，前面记录的字符串会复制d-1次，并加上末端

读了上述要求后，自然而然地想到直接的算法：按照输入字符串进行遍历，遍历到字母, 则存储; 遍历到数字，则将前面储存的字符串以d-1次循环加在原字符串后方。

class Solution {
    public String decodeAtIndex(String S, int K) {
        long size = 0;
        int N = S.length();

        // Find size = length of decoded string
        for (int i = 0; i < N; ++i) {
            char c = S.charAt(i);
            if (Character.isDigit(c))
                size *= c - '0';
            else
                size++;
        }

        for (int i = N-1; i >= 0; --i) {
            char c = S.charAt(i);
            K %= size;
            if (K == 0 && Character.isLetter(c))
                return Character.toString(c);

            if (Character.isDigit(c))
                size /= c - '0';
            else
                size--;
        }

        throw null;
    }
}

作者：LeetCode
链接：https://leetcode-cn.com/problems/two-sum/solution/suo-yin-chu-de-jie-ma-zi-fu-chuan-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

